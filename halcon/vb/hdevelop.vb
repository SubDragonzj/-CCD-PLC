* Measure 01: Code generated by Measure 01
* Measure 01: Initialize acquisition
open_framegrabber ('GigEVision2', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', 'd47c44301e17_OMRONSENTECH_STCMBA503POE', 0, -1, AcqHandle)
* Measure 01: Initialize calibration
CameraParameters := ['area_scan_division',1.37727,31.7944,2.1972e-006,2.2e-006,361.524,-499.362,2592,1944]
CameraPose := [0.00989773,0.0163173,6.86213,358.601,3.04897,359.151,0]
* Measure 01: Prepare measurement
AmplitudeThreshold := 40
RoiWidthLen2 := 5
set_system ('int_zooming', 'true')
* Measure 01: Coordinates for line Measure 01 [0]
LineRowStart_Measure_01_0 := 201.306
LineColumnStart_Measure_01_0 := 685.618
LineRowEnd_Measure_01_0 := 408.666
LineColumnEnd_Measure_01_0 := 892.821
* Measure 01: Convert coordinates to rectangle2 type
TmpCtrl_Row := 0.5*(LineRowStart_Measure_01_0+LineRowEnd_Measure_01_0)
TmpCtrl_Column := 0.5*(LineColumnStart_Measure_01_0+LineColumnEnd_Measure_01_0)
TmpCtrl_Dr := LineRowStart_Measure_01_0-LineRowEnd_Measure_01_0
TmpCtrl_Dc := LineColumnEnd_Measure_01_0-LineColumnStart_Measure_01_0
TmpCtrl_Phi := atan2(TmpCtrl_Dr, TmpCtrl_Dc)
TmpCtrl_Len1 := 0.5*sqrt(TmpCtrl_Dr*TmpCtrl_Dr + TmpCtrl_Dc*TmpCtrl_Dc)
TmpCtrl_Len2 := RoiWidthLen2
* Measure 01: Create measure for line Measure 01 [0]
* Measure 01: Attention: This assumes all images have the same size!
gen_measure_rectangle2 (TmpCtrl_Row, TmpCtrl_Column, TmpCtrl_Phi, TmpCtrl_Len1, TmpCtrl_Len2, 2592, 1944, 'nearest_neighbor', MsrHandle_Measure_01_0)
* Measure 01: Coordinates for line Measure 01 [1]
LineRowStart_Measure_01_1 := 404.548
LineColumnStart_Measure_01_1 := 1028.48
LineRowEnd_Measure_01_1 := 513.311
LineColumnEnd_Measure_01_1 := 887.393
* Measure 01: Convert coordinates to rectangle2 type
TmpCtrl_Row := 0.5*(LineRowStart_Measure_01_1+LineRowEnd_Measure_01_1)
TmpCtrl_Column := 0.5*(LineColumnStart_Measure_01_1+LineColumnEnd_Measure_01_1)
TmpCtrl_Dr := LineRowStart_Measure_01_1-LineRowEnd_Measure_01_1
TmpCtrl_Dc := LineColumnEnd_Measure_01_1-LineColumnStart_Measure_01_1
TmpCtrl_Phi := atan2(TmpCtrl_Dr, TmpCtrl_Dc)
TmpCtrl_Len1 := 0.5*sqrt(TmpCtrl_Dr*TmpCtrl_Dr + TmpCtrl_Dc*TmpCtrl_Dc)
TmpCtrl_Len2 := RoiWidthLen2
* Measure 01: Create measure for line Measure 01 [1]
* Measure 01: Attention: This assumes all images have the same size!
gen_measure_rectangle2 (TmpCtrl_Row, TmpCtrl_Column, TmpCtrl_Phi, TmpCtrl_Len1, TmpCtrl_Len2, 2592, 1944, 'nearest_neighbor', MsrHandle_Measure_01_1)
* Measure 01: Coordinates for line Measure 01 [2]
LineRowStart_Measure_01_2 := 1303.55
LineColumnStart_Measure_01_2 := 1981.17
LineRowEnd_Measure_01_2 := 1431.37
LineColumnEnd_Measure_01_2 := 2112.18
* Measure 01: Convert coordinates to rectangle2 type
TmpCtrl_Row := 0.5*(LineRowStart_Measure_01_2+LineRowEnd_Measure_01_2)
TmpCtrl_Column := 0.5*(LineColumnStart_Measure_01_2+LineColumnEnd_Measure_01_2)
TmpCtrl_Dr := LineRowStart_Measure_01_2-LineRowEnd_Measure_01_2
TmpCtrl_Dc := LineColumnEnd_Measure_01_2-LineColumnStart_Measure_01_2
TmpCtrl_Phi := atan2(TmpCtrl_Dr, TmpCtrl_Dc)
TmpCtrl_Len1 := 0.5*sqrt(TmpCtrl_Dr*TmpCtrl_Dr + TmpCtrl_Dc*TmpCtrl_Dc)
TmpCtrl_Len2 := RoiWidthLen2
* Measure 01: Create measure for line Measure 01 [2]
* Measure 01: Attention: This assumes all images have the same size!
gen_measure_rectangle2 (TmpCtrl_Row, TmpCtrl_Column, TmpCtrl_Phi, TmpCtrl_Len1, TmpCtrl_Len2, 2592, 1944, 'nearest_neighbor', MsrHandle_Measure_01_2)
* Measure 01: Coordinates for line Measure 01 [3]
LineRowStart_Measure_01_3 := 1461.01
LineColumnStart_Measure_01_3 := 2100.45
LineRowEnd_Measure_01_3 := 1453.6
LineColumnEnd_Measure_01_3 := 2399.64
* Measure 01: Convert coordinates to rectangle2 type
TmpCtrl_Row := 0.5*(LineRowStart_Measure_01_3+LineRowEnd_Measure_01_3)
TmpCtrl_Column := 0.5*(LineColumnStart_Measure_01_3+LineColumnEnd_Measure_01_3)
TmpCtrl_Dr := LineRowStart_Measure_01_3-LineRowEnd_Measure_01_3
TmpCtrl_Dc := LineColumnEnd_Measure_01_3-LineColumnStart_Measure_01_3
TmpCtrl_Phi := atan2(TmpCtrl_Dr, TmpCtrl_Dc)
TmpCtrl_Len1 := 0.5*sqrt(TmpCtrl_Dr*TmpCtrl_Dr + TmpCtrl_Dc*TmpCtrl_Dc)
TmpCtrl_Len2 := RoiWidthLen2
* Measure 01: Create measure for line Measure 01 [3]
* Measure 01: Attention: This assumes all images have the same size!
gen_measure_rectangle2 (TmpCtrl_Row, TmpCtrl_Column, TmpCtrl_Phi, TmpCtrl_Len1, TmpCtrl_Len2, 2592, 1944, 'nearest_neighbor', MsrHandle_Measure_01_3)
while (true)
    * Measure 01: Acquire image
    grab_image (Image, AcqHandle)
    * Measure 01: Execute measurements
    measure_pos (Image, MsrHandle_Measure_01_0, 1, AmplitudeThreshold, 'all', 'all', Row_Measure_01_0, Column_Measure_01_0, Amplitude_Measure_01_0, Distance_Measure_01_0)
    measure_pos (Image, MsrHandle_Measure_01_1, 1, AmplitudeThreshold, 'all', 'all', Row_Measure_01_1, Column_Measure_01_1, Amplitude_Measure_01_1, Distance_Measure_01_1)
    measure_pos (Image, MsrHandle_Measure_01_2, 1, AmplitudeThreshold, 'all', 'all', Row_Measure_01_2, Column_Measure_01_2, Amplitude_Measure_01_2, Distance_Measure_01_2)
    measure_pos (Image, MsrHandle_Measure_01_3, 1, AmplitudeThreshold, 'all', 'all', Row_Measure_01_3, Column_Measure_01_3, Amplitude_Measure_01_3, Distance_Measure_01_3)
    * Measure 01: Transform to world coordinates
    * Measure 01: Calibrate positions for Measure 01 [0]
    image_points_to_world_plane (CameraParameters, CameraPose, Row_Measure_01_0, Column_Measure_01_0, 0.001, Column_World_Measure_01_0, Row_World_Measure_01_0)
    * Measure 01: Calibrate distances
    TmpCtrl_Length := |Row_World_Measure_01_0|
    if (TmpCtrl_Length > 0)
        tuple_select_range (Row_World_Measure_01_0, 0, TmpCtrl_Length - 2, TmpCtrl_RowFrom)
        tuple_select_range (Column_World_Measure_01_0, 0, TmpCtrl_Length - 2, TmpCtrl_ColumnFrom)
        tuple_select_range (Row_World_Measure_01_0, 1, TmpCtrl_Length - 1, TmpCtrl_RowTo)
        tuple_select_range (Column_World_Measure_01_0, 1, TmpCtrl_Length - 1, TmpCtrl_ColumnTo)
        distance_pp (TmpCtrl_RowFrom, TmpCtrl_ColumnFrom, TmpCtrl_RowTo, TmpCtrl_ColumnTo, Distance_World_Measure_01_0)
    endif
    * Measure 01: Calibrate positions for Measure 01 [1]
    image_points_to_world_plane (CameraParameters, CameraPose, Row_Measure_01_1, Column_Measure_01_1, 0.001, Column_World_Measure_01_1, Row_World_Measure_01_1)
    * Measure 01: Calibrate distances
    TmpCtrl_Length := |Row_World_Measure_01_1|
    if (TmpCtrl_Length > 0)
        tuple_select_range (Row_World_Measure_01_1, 0, TmpCtrl_Length - 2, TmpCtrl_RowFrom)
        tuple_select_range (Column_World_Measure_01_1, 0, TmpCtrl_Length - 2, TmpCtrl_ColumnFrom)
        tuple_select_range (Row_World_Measure_01_1, 1, TmpCtrl_Length - 1, TmpCtrl_RowTo)
        tuple_select_range (Column_World_Measure_01_1, 1, TmpCtrl_Length - 1, TmpCtrl_ColumnTo)
        distance_pp (TmpCtrl_RowFrom, TmpCtrl_ColumnFrom, TmpCtrl_RowTo, TmpCtrl_ColumnTo, Distance_World_Measure_01_1)
    endif
    * Measure 01: Calibrate positions for Measure 01 [2]
    image_points_to_world_plane (CameraParameters, CameraPose, Row_Measure_01_2, Column_Measure_01_2, 0.001, Column_World_Measure_01_2, Row_World_Measure_01_2)
    * Measure 01: Calibrate distances
    TmpCtrl_Length := |Row_World_Measure_01_2|
    if (TmpCtrl_Length > 0)
        tuple_select_range (Row_World_Measure_01_2, 0, TmpCtrl_Length - 2, TmpCtrl_RowFrom)
        tuple_select_range (Column_World_Measure_01_2, 0, TmpCtrl_Length - 2, TmpCtrl_ColumnFrom)
        tuple_select_range (Row_World_Measure_01_2, 1, TmpCtrl_Length - 1, TmpCtrl_RowTo)
        tuple_select_range (Column_World_Measure_01_2, 1, TmpCtrl_Length - 1, TmpCtrl_ColumnTo)
        distance_pp (TmpCtrl_RowFrom, TmpCtrl_ColumnFrom, TmpCtrl_RowTo, TmpCtrl_ColumnTo, Distance_World_Measure_01_2)
    endif
    * Measure 01: Calibrate positions for Measure 01 [3]
    image_points_to_world_plane (CameraParameters, CameraPose, Row_Measure_01_3, Column_Measure_01_3, 0.001, Column_World_Measure_01_3, Row_World_Measure_01_3)
    * Measure 01: Calibrate distances
    TmpCtrl_Length := |Row_World_Measure_01_3|
    if (TmpCtrl_Length > 0)
        tuple_select_range (Row_World_Measure_01_3, 0, TmpCtrl_Length - 2, TmpCtrl_RowFrom)
        tuple_select_range (Column_World_Measure_01_3, 0, TmpCtrl_Length - 2, TmpCtrl_ColumnFrom)
        tuple_select_range (Row_World_Measure_01_3, 1, TmpCtrl_Length - 1, TmpCtrl_RowTo)
        tuple_select_range (Column_World_Measure_01_3, 1, TmpCtrl_Length - 1, TmpCtrl_ColumnTo)
        distance_pp (TmpCtrl_RowFrom, TmpCtrl_ColumnFrom, TmpCtrl_RowTo, TmpCtrl_ColumnTo, Distance_World_Measure_01_3)
    endif
    * Measure 01: Do something with the results
endwhile
